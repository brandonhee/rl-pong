import numpy as np

def screen_process(screen_input, p_loc, frame_ct, rng_tol, frame_tol=21):
    """ prepro 210x160x3 uint8 frame into 6400 (80x80) 1D float vector.
     The frame_tol is the number of frames to wait before scanning."""
    screen_input = screen_input[35:195]  # crop
    screen_input = screen_input[::2, ::2, 0]  # downsample by factor of 2
    screen_input[screen_input == 144] = 0  # erase background (background type 1)
    screen_input[screen_input == 109] = 0  # erase background (background type 2)
    screen_input[screen_input != 0] = 1  # everything else (paddles, ball) just set to 1

    if frame_ct >= frame_tol:
        ball = (-1, -1)
        r_paddle = (-1, -1)
        found = False
        #look for ball near right paddle, else we don't care
        for i in range(0, 80): #y 
            for j in range(65, 70): #x
                if screen_input[i][j] != 0:
                    ball = (i, j)
                    found = True 
                    break
            if found:
                break
        
        # just need top pixel of right paddle
        for m in range(0, 79):
            if screen_input[m][70] != 0:
                r_paddle = (m, 70)
                break

    else:
        ball = (-1,-1)
        r_paddle = (-1, -1)

    # keep the same structure of horizon so we can switch between trainers
    return screen_input.astype(np.float).ravel(), [ball, r_paddle, r_paddle, ball, '']
    
def follow_the_ball(current_state):
    if current_state[0] == (-1, -1) or current_state[1] == (-1, -1): 
        return 0

    paddle_top_y = current_state[1][0]
    ball_top_y = current_state[0][0]

    if paddle_top_y > ball_top_y: # paddle below ball level
        return 2
    return 3


def h_diff_mod(p_up, move_recommend, weight=0.15):
    """This function uses the preset weight to modify the probability generated by the
    neural network. In either case, agreement promotes the movement while disagreement
    damps the probability. The higher the probability, the more likely to move up."""
    if move_recommend == 2:
        return weight * p_up
    elif move_recommend == 3:
        return -weight * p_up
    else:
        return 0